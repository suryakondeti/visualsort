{"version":3,"sources":["insertionSort.js","selectionSort.js","quickSort.js","bubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["temp","final_arr","final_color_arr","insertionSort","givenArr","color_arr","Array","length","fill","i","j","push","slice","selectionSort","inputArr","n","min","quickSort","array","pivot","lesserArray","greaterArray","resultArr","concat","from","console","log","quickSortHelper","bubbleSort","numSwaps","Chart","defaults","global","legend","display","delay","ms","Promise","res","setTimeout","App","props","numsToSort","numCols","speed","algo","state","selectorFlag","sliderFlag","algoSelected","data","labels","datasets","backgroundColor","borderWidth","newValue","this","generateList","toSort","toColor","setState","visualize","colorArr","visualize_helper","givenCols","randomArray","r","Math","floor","random","indexOf","window","location","reload","changeEvent","dropDownUpdate","target","value","align","Select","autoWidth","defaultValue","renderValue","disabled","onChange","handleSelectChange","MenuItem","Slider","style","width","step","max","valueLabelDisplay","sizeSliderUpdate","speedSliderUpdate","Button","variant","color","onClick","startSort","disableElevation","reset","height","options","responsive","scales","yAxes","gridLines","ticks","beginAtZero","xAxes","maintainAspectRatio","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca2b21f0.chunk.js","sourcesContent":["const final_arr = [];\r\nconst final_color_arr = [];\r\nvar temp;\r\nfunction insertionSort(givenArr) {\r\n  const color_arr = new Array(givenArr.length).fill(0);\r\n  for (var i = 1; i < givenArr.length; i++) {\r\n    if (givenArr[i] < givenArr[i - 1]) {\r\n      var j = i;\r\n      while (givenArr[j] < givenArr[j - 1] && j > 0) {\r\n        temp = givenArr[j];\r\n        givenArr[j] = givenArr[j - 1];\r\n        givenArr[j - 1] = temp;\r\n        j--;\r\n        color_arr[j] = 1;\r\n        color_arr[j - 1] = 1;\r\n        final_arr.push(givenArr.slice()); //.slice() for deepcopying (pass by value)\r\n        final_color_arr.push(color_arr.slice());\r\n        color_arr.fill(0);\r\n      }\r\n    }\r\n  }\r\n  return [final_arr, final_color_arr];\r\n}\r\n\r\nexport default insertionSort;\r\n","const final_arr = [];\r\nconst final_color_arr = [];\r\nfunction selectionSort(inputArr) {\r\n  const color_arr = new Array(inputArr.length).fill(0);\r\n  let n = inputArr.length;\r\n  for (let i = 0; i < n; i++) {\r\n    let min = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (inputArr[j] < inputArr[min]) {\r\n        min = j;\r\n      }\r\n    }\r\n    if (min !== i) {\r\n      let temp = inputArr[i];\r\n      inputArr[i] = inputArr[min];\r\n      inputArr[min] = temp;\r\n      color_arr[i] = 1;\r\n      color_arr[min] = 1;\r\n      final_arr.push(inputArr.slice()); //.slice() for deepcopying (pass by value)\r\n      final_color_arr.push(color_arr.slice());\r\n      color_arr.fill(0);\r\n    }\r\n  }\r\n  return [final_arr, final_color_arr];\r\n}\r\n\r\nexport default selectionSort;\r\n","var final_arr = [];\r\nconst final_color_arr = [];\r\nfunction quickSort(array) {\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n\r\n  var pivot = array[0];\r\n  var lesserArray = [];\r\n  var greaterArray = [];\r\n\r\n  for (var i = 1; i < array.length; i++) {\r\n    if (array[i] > pivot) {\r\n      greaterArray.push(array[i]);\r\n    } else {\r\n      lesserArray.push(array[i]);\r\n    }\r\n  }\r\n  var resultArr = quickSort(lesserArray).concat(pivot, quickSort(greaterArray));\r\n  final_arr.push(Array.from(resultArr));\r\n  var color_arr = new Array(lesserArray.length).fill(0);\r\n  color_arr.push(2);\r\n  color_arr = color_arr.concat(new Array(greaterArray.length).fill(1));\r\n  final_color_arr.push(color_arr.slice());\r\n  console.log(color_arr);\r\n  color_arr.fill(0);\r\n  return resultArr;\r\n}\r\n\r\nfunction quickSortHelper(array) {\r\n  quickSort(array);\r\n  return [final_arr, final_color_arr];\r\n}\r\nexport default quickSortHelper;\r\n","const final_arr = [];\r\nconst final_color_arr = [];\r\nvar temp;\r\n\r\nfunction bubbleSort(givenArr) {\r\n  const color_arr = new Array(givenArr.length).fill(0);\r\n  var numSwaps = 1;\r\n  while (numSwaps != 0) {\r\n    numSwaps = 0;\r\n    for (var i = 0; i < givenArr.length - 1; i++) {\r\n      if (givenArr[i] > givenArr[i + 1]) {\r\n        numSwaps += 1;\r\n        temp = givenArr[i];\r\n        givenArr[i] = givenArr[i + 1];\r\n        givenArr[i + 1] = temp;\r\n        color_arr[i] = 1;\r\n        color_arr[i + 1] = 1;\r\n        final_arr.push(givenArr.slice()); //.slice() for deepcopying (pass by value)\r\n        final_color_arr.push(color_arr.slice());\r\n        color_arr.fill(0);\r\n      }\r\n    }\r\n  }\r\n  return [final_arr, final_color_arr];\r\n\r\n  //   for (var i = 1; i < givenArr.length; i++) {\r\n  //     if (givenArr[i] < givenArr[i - 1]) {\r\n  //       var j = i;\r\n  //       while (givenArr[j] < givenArr[j - 1] && j > 0) {\r\n  //         temp = givenArr[j];\r\n  //         givenArr[j] = givenArr[j - 1];\r\n  //         givenArr[j - 1] = temp;\r\n  //         j--;\r\n  //         color_arr[j] = 1;\r\n  //         color_arr[j - 1] = 1;\r\n  //         final_arr.push(givenArr.slice()); //.slice() for deepcopying (pass by value)\r\n  //         final_color_arr.push(color_arr.slice());\r\n  //         color_arr.fill(0);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   return [final_arr, final_color_arr];\r\n}\r\n\r\nexport default bubbleSort;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Chart from \"chart.js\";\nimport \"react-dropdown/style.css\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport insertionSort from \"./insertionSort\";\nimport selectionSort from \"./selectionSort\";\nimport quickSortHelper from \"./quickSort\";\nimport { Slider } from \"@material-ui/core\";\nimport { Select } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport bubbleSort from \"./bubbleSort\";\n\nChart.defaults.global.legend.display = false;\nconst delay = (ms) => new Promise((res) => setTimeout(res, ms));\n\n// enum Algo = {\n//   HEAP,\n//   SELECTION,\n//   BUBBLE,\n//   MERGE,\n//   QUICK,\n//   INSERTION\n// }\n\n// const options = [\n//   \"Heap Sort\",\n//   \"Selection Sort\",\n//   \"Bubble Sort\",\n//   \"Merge Sort\",\n//   \"Quick Sort\",\n//   \"Insertion Sort\",\n// ];\n\nclass App extends React.Component {\n  sizeSliderUpdate(newValue) {\n    this.numCols = newValue;\n    this.generateList(this.numCols);\n  }\n  speedSliderUpdate(newValue) {\n    console.log(this.speed);\n    this.speed = -196 * newValue + 1980;\n    console.log(this.speed);\n  }\n  dropDownUpdate(newValue) {\n    this.algo = newValue;\n  }\n  constructor(props) {\n    super(props);\n    this.numsToSort = [65, 123, 80, 181, 156, 55, 40, 2, 13, 97];\n    this.numCols = 0;\n    this.speed = 1000;\n    this.algo = null;\n    this.state = {\n      selectorFlag: false,\n      sliderFlag: false,\n      algoSelected: \"INSERTION SORT\",\n      data: {\n        labels: [65, 123, 80, 181, 156, 55, 40, 2, 13, 97],\n        datasets: [\n          {\n            backgroundColor: \"rgb(0,158,192)\",\n            borderWidth: 2,\n            data: [65, 123, 80, 181, 156, 55, 40, 2, 13, 97],\n          },\n        ],\n      },\n    };\n  }\n\n  startSort() {\n    var toSort;\n    var toColor;\n    this.setState({ selectorFlag: true });\n    this.setState({ sliderFlag: true });\n    if (this.numCols === 0) {\n      this.numCols = 10;\n    }\n    if (this.algo === null) {\n      this.algo = \"INSERTION SORT\";\n    }\n    switch (this.algo) {\n      case \"HEAP SORT\":\n        console.log(\"HEAP \", this.numCols);\n        break;\n\n      case \"SELECTION SORT\":\n        console.log(\"SELECTION  \", this.numCols);\n        [toSort, toColor] = selectionSort(this.numsToSort);\n        this.visualize(toSort, toColor);\n        break;\n\n      case \"MERGE SORT\":\n        console.log(\"MERGE \", this.numCols);\n        break;\n\n      case \"BUBBLE SORT\":\n        console.log(\"BUBBLE \", this.numCols);\n        [toSort, toColor] = bubbleSort(this.numsToSort);\n        this.visualize(toSort, toColor);\n        break;\n\n      case \"INSERTION SORT\":\n        console.log(\"INSERTION \", this.numCols);\n        console.log(this.numsToSort);\n        [toSort, toColor] = insertionSort(this.numsToSort);\n        this.visualize(toSort, toColor);\n        break;\n\n      case \"QUICK SORT\":\n        console.log(\"QUICK  \", this.numCols);\n        // [toSort, toColor] = quickSort(this.numsToSort);\n        [toSort, toColor] = quickSortHelper(this.numsToSort);\n        this.visualize(toSort, toColor);\n        break;\n\n      default: {\n      }\n    }\n  }\n\n  visualize_helper(givenArr, colorArr) {\n    this.setState({\n      data: {\n        labels: givenArr,\n        datasets: [\n          {\n            backgroundColor: colorArr,\n            borderWidth: 2,\n            data: givenArr,\n          },\n        ],\n      },\n    });\n  }\n\n  async visualize(final_arr, final_color_arr) {\n    for (var i = 0; i < final_arr.length; i++) {\n      if (final_color_arr === null) {\n        final_color_arr = [];\n        final_color_arr[i] = new Array(final_arr.length).fill(0);\n      }\n      const colorArr = [];\n      for (var j = 0; j < final_color_arr[i].length; j++) {\n        if (final_color_arr[i][j] === 1) {\n          colorArr.push(\"rgb(0,0,128)\");\n        } else if (final_color_arr[i][j] === 0) {\n          colorArr.push(\"rgb(230,0,126)\");\n        } else if (final_color_arr[i][j] === 2) {\n          colorArr.push(\"rgb(255,211,0)\");\n        }\n      }\n      this.visualize_helper(final_arr[i], colorArr);\n      await delay(this.speed);\n    }\n    // this.setState({ selectorFlag: false });\n    // this.setState({ sliderFlag: false });\n  }\n\n  generateList(givenCols) {\n    const randomArray = [];\n    while (randomArray.length < givenCols) {\n      var r = Math.floor(Math.random() * 250) + 1;\n      if (randomArray.indexOf(r) === -1) randomArray.push(r);\n    }\n    this.numsToSort = randomArray;\n    this.setState({\n      data: {\n        labels: randomArray,\n        datasets: [\n          {\n            backgroundColor: \"rgb(0,158,192)\",\n            borderWidth: 2,\n            data: randomArray,\n          },\n        ],\n      },\n    });\n  }\n\n  reset() {\n    window.location.reload();\n  }\n\n  handleSelectChange(changeEvent) {\n    this.dropDownUpdate(changeEvent.target.value);\n    this.setState({ algoSelected: changeEvent.target.value });\n  }\n  render() {\n    return (\n      <div align=\"center\">\n        <br></br>\n        <Select\n          autoWidth={true}\n          defaultValue={\"INSERTION SORT\"}\n          renderValue={() => {\n            return this.state.algoSelected;\n          }}\n          value={this.state.algoSelected}\n          disabled={this.state.selectorFlag}\n          onChange={(changeEvent, newValue) => {\n            this.handleSelectChange(changeEvent);\n          }}\n        >\n          <MenuItem value={\"INSERTION SORT\"}>Insertion Sort</MenuItem>\n          <MenuItem value={\"HEAP SORT\"}>Heap Sort</MenuItem>\n          <MenuItem value={\"QUICK SORT\"}>Quick Sort</MenuItem>\n          <MenuItem value={\"MERGE SORT\"}>Merge Sort</MenuItem>\n          <MenuItem value={\"SELECTION SORT\"}>Selection Sort</MenuItem>\n          <MenuItem value={\"BUBBLE SORT\"}>Bubble Sort </MenuItem>\n        </Select>\n        <p>\n          <b>Array length:</b>\n        </p>\n        <Slider\n          style={{ width: 300 }}\n          disabled={this.state.sliderFlag}\n          step={5}\n          defaultValue={10}\n          max={100}\n          min={5}\n          valueLabelDisplay={\"on\"}\n          onChange={(changeEvent, newValue) => {\n            this.sizeSliderUpdate(newValue);\n          }}\n        />\n        <p>\n          <b>Sorting speed:</b>\n        </p>\n        <Slider\n          style={{ width: 300 }}\n          disabled={this.state.sliderFlag}\n          step={1}\n          defaultValue={5}\n          max={10}\n          min={1}\n          valueLabelDisplay={\"off\"}\n          onChange={(changeEvent, newValue) => {\n            this.speedSliderUpdate(newValue);\n          }}\n        />\n        <br></br>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            this.startSort();\n          }}\n          disableElevation\n        >\n          Visualize!\n        </Button>\n        &nbsp; &nbsp; &nbsp;\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            this.reset();\n          }}\n          disableElevation\n        >\n          Reset\n        </Button>\n        <Bar\n          width={300}\n          height={100}\n          options={{\n            responsive: true,\n            scales: {\n              yAxes: [\n                {\n                  gridLines: {\n                    display: false,\n                  },\n                  ticks: {\n                    display: false,\n                    beginAtZero: true,\n                  },\n                },\n              ],\n              xAxes: [\n                {\n                  gridLines: {\n                    display: false,\n                  },\n                },\n              ],\n            },\n            maintainAspectRatio: true,\n          }}\n          data={this.state.data}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}